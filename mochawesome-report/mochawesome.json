{
  "stats": {
    "suites": 4,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-03T16:36:46.903Z",
    "end": "2023-08-03T16:36:46.927Z",
    "duration": 24,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5e11ca88-0d09-4d13-9176-bd6591c7d546",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3a53fac6-3d93-4def-abea-190ae253aadc",
          "title": "isArrayEven positive tests",
          "fullFile": "C:\\Users\\Charles_Adair\\Documents\\Automation-js-mentoring\\test\\numbers-validator\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\numbers-validator\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isArrayEven positive tests\"",
              "fullTitle": "isArrayEven positive tests \"before each\" hook in \"isArrayEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "e2c1bc3b-eaa3-4283-b134-7dfb0bf88c07",
              "parentUUID": "3a53fac6-3d93-4def-abea-190ae253aadc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isArrayEven positive tests\"",
              "fullTitle": "isArrayEven positive tests \"after each\" hook in \"isArrayEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "42cbcce5-5a3a-48ee-9b6a-0160c7ae49c9",
              "parentUUID": "3a53fac6-3d93-4def-abea-190ae253aadc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return an array of even numbers",
              "fullTitle": "isArrayEven positive tests should return an array of even numbers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [10, 23, 30, 45, 50];\nconst validationResults = validator.getEvenNumbersFromArray(arrayOfNumbers);\nexpect(validationResults).to.be.eql([10, 30, 50]);",
              "err": {},
              "uuid": "7f3ee17d-4cc4-4f73-8f56-f58978ff9619",
              "parentUUID": "3a53fac6-3d93-4def-abea-190ae253aadc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if array is not full of numbers",
              "fullTitle": "isArrayEven positive tests should throw an error if array is not full of numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfValues = [10, '23', 30, 45, 50];\nexpect(() => {\n  validator.getEvenNumbersFromArray(arrayOfValues);\n}).to.throw('[10,23,30,45,50] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "76f5775d-2dc7-4f29-b32d-8de4d06e3554",
              "parentUUID": "3a53fac6-3d93-4def-abea-190ae253aadc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f3ee17d-4cc4-4f73-8f56-f58978ff9619",
            "76f5775d-2dc7-4f29-b32d-8de4d06e3554"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6439ba1c-4cfa-4b66-8154-e3ba01145e5f",
          "title": "isAllNumbers positive tests",
          "fullFile": "C:\\Users\\Charles_Adair\\Documents\\Automation-js-mentoring\\test\\numbers-validator\\isAllNumbers.spec.js",
          "file": "\\test\\numbers-validator\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers positive tests\"",
              "fullTitle": "isAllNumbers positive tests \"before each\" hook in \"isAllNumbers positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "bb23c450-4a11-4123-811a-2f80eba81f49",
              "parentUUID": "6439ba1c-4cfa-4b66-8154-e3ba01145e5f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers positive tests\"",
              "fullTitle": "isAllNumbers positive tests \"after each\" hook in \"isAllNumbers positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "0b22afce-9f8d-4743-8765-63a9d2300983",
              "parentUUID": "6439ba1c-4cfa-4b66-8154-e3ba01145e5f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an array of numbers",
              "fullTitle": "isAllNumbers positive tests should return true when provided with an array of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [10, 23, 30, 45, 50];\nconst validationResults = validator.isAllNumbers(arrayOfNumbers);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "6652eb75-59b0-4906-a1fc-b7066a7be494",
              "parentUUID": "6439ba1c-4cfa-4b66-8154-e3ba01145e5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an odd number",
              "fullTitle": "isAllNumbers positive tests should return false when provided with an odd number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayOfNumbers = [10, 23, 30, 'seven', 50];\nconst validationResults = validator.isAllNumbers(arrayOfNumbers);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "ae1c9a26-a1a8-4ac4-a0ba-3eeefd4794b8",
              "parentUUID": "6439ba1c-4cfa-4b66-8154-e3ba01145e5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isAllNumbers positive tests should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// const arrayOfNumbers = 10;\n expect(() => {\n   validator.isAllNumbers(10);\n }).to.throw('[10] is not an array');",
              "err": {},
              "uuid": "fbf85f2d-5742-464d-939e-3c625feb5d7b",
              "parentUUID": "6439ba1c-4cfa-4b66-8154-e3ba01145e5f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6652eb75-59b0-4906-a1fc-b7066a7be494",
            "ae1c9a26-a1a8-4ac4-a0ba-3eeefd4794b8",
            "fbf85f2d-5742-464d-939e-3c625feb5d7b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f183a943-e638-4e12-bcd0-50f5dc3aa60a",
          "title": "isInteger positive tests",
          "fullFile": "C:\\Users\\Charles_Adair\\Documents\\Automation-js-mentoring\\test\\numbers-validator\\isInteger.spec.js",
          "file": "\\test\\numbers-validator\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger positive tests\"",
              "fullTitle": "isInteger positive tests \"before each\" hook in \"isInteger positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "7acf8fd3-727e-4c3d-8315-d85b63f9419e",
              "parentUUID": "f183a943-e638-4e12-bcd0-50f5dc3aa60a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger positive tests\"",
              "fullTitle": "isInteger positive tests \"after each\" hook in \"isInteger positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "69ab88d7-811d-4059-a727-5d6f02cd40ed",
              "parentUUID": "f183a943-e638-4e12-bcd0-50f5dc3aa60a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an integer number",
              "fullTitle": "isInteger positive tests should return true when provided with an integer number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "6a768ae7-e439-4f45-a056-cb5b1a5f4caf",
              "parentUUID": "f183a943-e638-4e12-bcd0-50f5dc3aa60a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an non-integer number",
              "fullTitle": "isInteger positive tests should return false when provided with an non-integer number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(5.5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "8457b025-f031-42c5-80b2-93d80badab53",
              "parentUUID": "f183a943-e638-4e12-bcd0-50f5dc3aa60a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isInteger positive tests should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger('4');\n}).to.throw('[4] is not a number');",
              "err": {},
              "uuid": "6a176715-d2fd-456a-9437-3ba9826e3aa7",
              "parentUUID": "f183a943-e638-4e12-bcd0-50f5dc3aa60a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a768ae7-e439-4f45-a056-cb5b1a5f4caf",
            "8457b025-f031-42c5-80b2-93d80badab53",
            "6a176715-d2fd-456a-9437-3ba9826e3aa7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a009cb68-707b-40e9-b9cb-c79d882abe45",
          "title": "isNumberEven positive tests",
          "fullFile": "C:\\Users\\Charles_Adair\\Documents\\Automation-js-mentoring\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "bc617359-298d-40b1-b997-ec6a537f9511",
              "parentUUID": "a009cb68-707b-40e9-b9cb-c79d882abe45",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "507f8dcd-cad9-449a-98da-93d32fa465bf",
              "parentUUID": "a009cb68-707b-40e9-b9cb-c79d882abe45",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive tests should return true when provided with an even number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "05d619c7-510e-428e-ab3f-a71748db5038",
              "parentUUID": "a009cb68-707b-40e9-b9cb-c79d882abe45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests should return false when provided with an odd number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "a44a45aa-e393-4e81-98a6-dfaa75fff731",
              "parentUUID": "a009cb68-707b-40e9-b9cb-c79d882abe45",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven positive tests should throw an error when provided a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "09b24d3d-ca6e-43e6-8c15-ce650a299b97",
              "parentUUID": "a009cb68-707b-40e9-b9cb-c79d882abe45",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05d619c7-510e-428e-ab3f-a71748db5038",
            "a44a45aa-e393-4e81-98a6-dfaa75fff731",
            "09b24d3d-ca6e-43e6-8c15-ce650a299b97"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}